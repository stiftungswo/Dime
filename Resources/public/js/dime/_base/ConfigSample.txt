//Sample Confguration Object for Widgets

config: {
    //Sample of a Simple TextBox Widget
    blahNode: {
        //The Property in the Widget to set, update and watch
        widgetProperty: 'value',
        //The Property from which to extract the Value form the Entity Object
        entityProperty: 'name',
        //The Value to use if $entityProperty does not exist in Entity Object
        nullValue: ''
    },
    //Sample of a more Coplex widget(FilteringSelect), with aditional Properties that can be set.
    blubNode: {

        //The Property in the Widget to set, update and watch
        widgetProperty: 'value',
        //The Property from which to extract the Value form the Entity Object
        entityProperty: 'customer',
        //The Value to use if $entityProperty does not exist in Entity Object
        nullValue: 1,
        //The Store for the FilteringSelect. If A string is Provided dime/store/storeManager is used to get the store.
        store: 'customers',
        //Tells the Logic to use this Property from the $entityProperty as the value to insert into $widgetProperty
        idProperty: 'id',
        //The Query Prototype to tell how should be filtered
        queryPrototype: {
            //This Results in ?project=1 asuming the id of entity is 1
            project: 'id'
        }
    },
    //Sample of a configuration of a List Widget
    fooNode:{
        //The Widget to use to Render the Child Entity use AMD Syntax Module gets autorequired
        childWidgetType: 'dime/widget/timeslice/TimesliceTableRowWidget',
        //The Query Prototype to tell how should be filtered
        queryPrototype: {
            //This Results in ?project=1 asuming the id of entity is 1
            project: 'id'
        },
        //The Header Column of the Table (Titles)
        header: [ 'Datum', 'Mitarbeiter', 'Aktivit√§t', 'Zeit' ],
        //Store to use for child
        store: 'timeslices',
        //Type of entities the Child Renders
        entitytype: 'timeslices'
    }
},
//This Configuration Property Lists Function Callbacks which should be exceuted on certain events
callbacks: {
    //Sample Configuration of a Button that alerts Hello World
    barNode:{
        //The Event that this callback should be bound on see dojo.on for names
        callbackName: 'click',
        //The Function Definition.
        callbackFunction: function() {
            alert('Hallo Welt!')
        }
    },
    //Sample Configuration to show how the context of the Callback is set.
    fooNode:{
        callbackName: 'change',
        callbackFunction: function(){
            //Dojo Takes Care that the context of the Callback is alway on the Widget executing the callback.
            //Thus this refers to the TextBox which calls the Callback
            var test = this.get('value');

            //If you want to access the Widget in which this widget resides, use the reference getParent().
            this.getParent().entity.test = test;
        }
    }
},
//This Property Defines on which events of the dime/event/eventManager
//The Event Manager takes care that the context is set to the Object that is listening to the Event.
//Thus this refers to the Class in which the Config array resides.
events:{
    //Called when entity has been sucessfully put
    event1:{
        //Which Topic to subscribe to.
        Topic: 'entityUpdate',
        //Which subtopic to subscribe to
        subTopic: 'projects',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //entity: The updated Entity
        //changedProperty: the Property that has changed
        //oldValue: the old Value of property
        //newValue: the new new value of Property
        //fromStore: if true entity has been updated via store
    },
    //Called after an entity has been sucessfully posted
    event2:{
        //Which Topic to subscribe to.
        Topic: 'entityCreate',
        //Which subtopic to subscribe to
        subTopic: 'projects',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //entity: The created Entity
    },
    //Called after an entity has been successfully deleted
    event3:{
        //Which Topic to subscribe to.
        Topic: 'entityDelete',
        //Which subtopic to subscribe to
        subTopic: 'projects',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //entity: The updated Entity
    },
    //Called when a widget has updated its rendering
    event4:{
        //Which Topic to subscribe to.
        Topic: 'widgetUpdate',
        //Which Widget has updated
        subTopic: 'widgetid',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //widget: the widget which has been updated
    },
    //Called when a widget has been created
    event5:{
        //Which Topic to subscribe to.
        Topic: 'widgetCreate',
        //Which Widget has updated
        subTopic: 'widgetid',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //widget: the widget which has been updated
    },
    //Called when a widget has been removed
    event6:{
        //Which Topic to subscribe to.
        Topic: 'widgetDelete',
        //Which Widget has updated
        subTopic: 'widgetid',
        //The Function to execute should event be fired.
        eventFunction: 'somefunctionintheclassiwantexecuted'
        //arg contains the Following Properties
        //widget: the widget which has been updated
        //Recursive if delete or delete Recursuve have been used to delete the Widget.
    }
}