<?php

namespace Dime\TimetrackerBundle\Entity;

use Doctrine\ORM\QueryBuilder;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    /**
     * Search for name or alias
     *
     * @param string $text
     * @param QueryBuilder $qb
     * @return ServiceRepository
     */
    public function search($text, QueryBuilder $qb = null)
    {
        if ($qb == null) {
            $qb = $this->builder;
        }

        $aliases = $qb->getRootAliases();
        $alias = array_shift($aliases);

        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->like($alias . '.description', ':text_like'),
            $qb->expr()->like($alias . '.name', ':text_like'),
            $qb->expr()->like($alias . '.alias', ':text_like')
        ));
        $qb->setParameter('text_like', '%' . $text . '%');

        return $this;
    }

    /**
     *
     * @param                   $date
     * @param QueryBuilder $qb
     *
     * @return ServiceRepository
     */
    public function scopeByDate($date, QueryBuilder $qb = null)
    {
        return $this;
    }

    public function scopeByRateGroup($rateGroupId, QueryBuilder $qb = null)
    {
        $aliases = $qb->getRootAliases();
        $alias = array_shift($aliases);
        $qb->innerJoin($alias . '.rates', 'rates111');
        $qb->innerJoin('rates111.rateGroup', 'rateGroup111');
        $qb->where('rateGroup111.id = :rateGroupId');
        $qb->setParameter('rateGroupId', $rateGroupId);
        return $this;
    }

    /**
     * Add different filter option to query
     *
     * @param array $filter
     * @param \Doctrine\ORM\QueryBuilder $qb
     *
     * @return ServiceRepository
     * @throws \Exception if an invalid filter is provided
     */
    public function filter(array $filter, QueryBuilder $qb = null)
    {
        if ($qb == null) {
            $qb = $this->builder;
        }

        if ($filter != null) {
            foreach ($filter as $key => $value) {
                switch ($key) {
                    case 'rateGroup':
                        $this->scopeByRateGroup($value, $qb);
                        break;
                    default:
                        throw new \Exception("Invalid filter $key");
                }
            }
        }
        return $this;
    }
}
