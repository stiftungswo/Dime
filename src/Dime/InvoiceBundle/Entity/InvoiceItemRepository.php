<?php

namespace Dime\InvoiceBundle\Entity;

use Dime\TimetrackerBundle\Entity\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * InvoiceItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceItemRepository extends EntityRepository
{
    /**
     * Search for name or alias
     *
     * @param string            $text
     * @param QueryBuilder      $qb
     *
     * @return InvoiceItemRepository
     */
    public function search($text, QueryBuilder $qb = null)
    {
        if ($qb == null) {
            $qb = $this->builder;
        }

        $aliases = $qb->getRootAliases();
        $alias = array_shift($aliases);

        $qb->andWhere($qb->expr()->like($alias . '.name', ':text_like'));
        $qb->setParameter('text_like', '%' . $text . '%');

        return $this;
    }

    /**
     * Filter by assigned tag
     *
     * @param integer|string             $tagIdOrName
     * @param \Doctrine\ORM\QueryBuilder $qb
     *
     * @return InvoiceItemRepository
     */
    public function scopeWithTag($tagIdOrName, QueryBuilder $qb = null)
    {
        // InvoiceItem has no relation to tags
        // but you could query it through InvoiceItem -> Invoice -> Project if there is ever a need for
        return $this;
    }

    /**
     * Filter by not-assigned tag
     *
     * @param integer|string             $tagIdOrName
     * @param \Doctrine\ORM\QueryBuilder $qb
     *
     * @return InvoiceItemRepository
     */
    public function scopeWithoutTag($tagIdOrName, QueryBuilder $qb = null)
    {
        // InvoiceItem has no relation to tags
        // but you could query it through InvoiceDiscount -> Invoice -> Project if there is ever a need for
        return $this;
    }

    /**
     * Add different filter option to query
     *
     * @param array                      $filter
     * @param \Doctrine\ORM\QueryBuilder $qb
     *
     * @return InvoiceItemRepository
     */
    public function filter(array $filter, QueryBuilder $qb = null)
    {
        if ($qb == null) {
            $qb = $this->builder;
        }

        if ($filter != null) {
            foreach ($filter as $key => $value) {
                switch ($key) {
                    case 'withTags':
                        $this->scopeWithTags($value, $qb);
                        break;
                    case 'withoutTags':
                        $this->scopeWithoutTags($value, $qb);
                        break;
                    case 'search':
                        $this->search($value, $qb);
                        break;
                    case 'date':
                        $this->scopeByDate($value, $qb);
                        break;
                    default:
                        $this->scopeByField($key, $value, $qb);
                }
            }
        }
        return $this;
    }

    /**
     *
     * @param                   $date
     * @param QueryBuilder      $qb
     *
     * @return InvoiceItemRepository
     */
    public function scopeByDate($date, QueryBuilder $qb = null)
    {
        // TODO: Implement scopeByDate() method.
        return $this;
    }
}
