# DimeErp

An ERP based on Symfony and AngularDart

[![Build Status](https://travis-ci.org/stiftungswo/Dime.svg?branch=master)](https://travis-ci.org/stiftungswo/Dime)
[![codecov](https://codecov.io/gh/stiftungswo/Dime/branch/master/graph/badge.svg)](https://codecov.io/gh/stiftungswo/Dime)
[![Waffle.io - Columns and their card count](https://badge.waffle.io/stiftungswo/Dime.svg?columns=all)](https://waffle.io/stiftungswo/Dime) 

## General Purpose

The project's purpose is tracking working Expenses Writing Offers and Sending Invoices

An API and open architecture will serve additional purposes:

  * accounting and invoicing (generate invoices, add non-time related items)
  * manage customers (CRM)
  * project management


## Installation / Setup for Development

0. WINDOWS USERS
    * Symfony uses symlinks that seem to break horribly on the windows file system. To circumvent this, sadly you will have to do your work in a virtual machine.
    * Download and install VM Ware Player or VirtualBox.
    * Download an Ubuntu 16.04 ISO
    * Setup your VM
1. Install Docker and Docker Compose:
    * Linux/VM    
      https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04
      https://www.digitalocean.com/community/tutorials/how-to-install-docker-compose-on-ubuntu-16-04
    
    * MacOS with [Homebrew](https://brew.sh/)
      ```
      brew cask install docker
      brew install docker-compose
      ```

2. Download and install Dartium (supports Dart files in chrome in uncompiled version):

    https://webdev.dartlang.org/tools

3. Check out the current version with all submodules
    ```
    sudo apt update && sudo apt install git               # if you don't have git yet
    git clone --recursive git@github.com:stiftungswo/dime
    ```

4. Build your Docker Images:

    `docker-compose build`
    
5. Start your stack from the dime root directory:
    * Linux/VM: `docker-compose up`
    * MacOS needs [docker-sync](http://docker-sync.io/) because without it performance is terrible
        *  `gem install docker-sync`
        * `docker-sync-stack start`
    
6. Restore dart packages:

    `docker exec -it dime ./env/pub_get.sh`

7. Restore php packages in repository root directory:

    `docker exec -it dime composer install`
    `docker exec -it dime ./env/install_bundles.sh`

8. Open http://localhost:3000 with dartium

9. Open http://localhost:8080 for phpmyadmin

    host: mariadb
    user: root
    no password

10. Your app WILL crash at some point saying something along the lines of "Out of disk space, 0 bytes written". At this point, you will need to clear the cache:

    `	docker exec dime rm -rf /dev/shm/dime`
    
## Project Structure

The Frontend can be found under [`src/Dime/FrontendBundle/Resources/public`](src/Dime/FrontendBundle/Resources/public) with a seperate README for further information.

The Backend files are located in 'src/Dime/' & the relative Bundle folder. Server-Side Routing happens in [Bundle]/Resources/config/routing.yml

![erm](https://raw.githubusercontent.com/stiftungswo/Dime/master/doc/dime_erm_clean.png)

This ERM excludes some tables that are currently empty/unused. [Here](https://raw.githubusercontent.com/stiftungswo/Dime/master/doc/dime_erm_full.png) is the full ERM.
 
## Bundles

There are Multiple Bundle Seperated by features:
    TimetrackerBundle Base Entities and RestAPI for them
    OfferBundle Offer Entities ans RestAPI
    InvoiceBundle Invoice Entities and RestAPI
    PrintingBundle Service for Printing PDF's
    FrontendBundle The Javascript GUI
    SwoCommonsBundle Some Entities and Resources used by all our Applications

For understanding the database abstraction, see

    TimetrackerBundle/Handler/GenericHandler
    
## Using Docker & docker-compose

You can inspect the logs of Dime and MariaDB by:

    docker-compose logs -f

Enter the dime docker container as root in interactive mode (bash):

    docker exec -it dime bash

Run any command inside the docker container:

    docker exec -it dime COMMAND

If you made any changes to the docker config, php config, composer dependencies etc. that are affecting the docker setup, run this command again:

    docker-compose build

For more infos visit docker.com


## Update

Update to last version

    git pull
    docker exec -it dime composer self-update
    docker exec -it dime composer update -v
    docker exec -it dime ./env/install_bundles.sh

If you have any problem remove vendor and install again

    docker exec -it dime rm -fR vendor

Update database

    docker exec -it dime php app/console doctrine:migrations:migrate

## Debugging

In order to debug, you need to install the following things developer machine:

* PHP (use `apt install php`)
* Xdebug helper extensions for chromium: https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc

Once you have installed those tools, do the following:

* Enable the debugger in Visual Studio code
* Browse Dime using chromium and enable the Xdebug helper

Once a breakpoint is hit, you will be able to inspect the code.

## Run Test

Run tests:

    docker exec -it dime ./env/run_tests.sh

Run a single test:

    docker exec -it dime ./env/run_tests.sh --filter ActivitiesControllerTest::testGetActivitiesAction

## Building the Frontend

To build the JS & HTML files for deployment, run these commands:

    docker exec -it dime ./env/build_frontend.sh

## Database Schema Management

Update Database Schema to the latest version:

    docker exec -it dime php app/console doctrine:migrations:migrate

Migrate Database Schema to a specific version:

    docker exec -it dime php app/console doctrine:migrations:migrate <version>

Generate new Empty Migration Class:

    docker exec -it dime php app/console doctrine:migrations:generate

After changing the ORM schema, sometimes you need to clear the cache before it works:

    docker exec -it dime php app/console cache:clear
    
Regenerate Fixtures as needed (see below)

## Fixtures

The fixtures are an example dataset that can be used while developing. But more important: the tests run against this database.

Load fixtures into the database:

    docker exec -it dime ./env/fixtures/load.sh

When the database schema changed, you need to regenerate the fixtures. You can do this with the following command (may take a while):

    docker exec -it dime ./env/db_generate_new_fixtures.sh

Then export the changes again and check in the new dime.sql into git

    docker exec -it dime ./env/fixtures/export.sh


## Logs

To log your symfony code, you can use logger:

    use Psr\Log\LoggerInterface;
    [...]
    $logger = $this->get('logger');
    $logger->info('My log');

The log file is in your container, look here:

    /dev/shm/dime/log/var/www/html/app/

A good way to read it is

    docker exec -it dime less /dev/shm/dime/log/var/www/html/app/test/test.log   #for tests
    docker exec -it dime less /dev/shm/dime/log/var/www/html/app/dev/dev.log     #for dev

## Deployment

### Deployment at SWO

Please see Documentation in the [private Wiki](https://wiki.stiftungswo.ch/it:sw:dime#deployment)

# Known Issues

## Using dartlang Plugin with atom

If you use Atom as IDE you'll propably want to benefit from the type safety features of Dart and install the static analyzer plugin `dart-atom/dartlang`.
Before you blame the readme that even after fixing the pub cache things don't work they way they are supposed to, just open the directory `src/Dime/FrontendBundle/Resources/public` in a new window and start coding.

## Using Docker with Docker for Windows/Mac

If you use the new Docker for Windows/Mac Tray thing, you'll have to make sure that this Repository as well as any other mounted volumes in docker-compose.yml are part of the `File Sharing` Tab of the tool. Else sync will not work.

We recommend using at least 2 CPU's and 4 GB of memory for your docker machine to make everything run smooth.

### OSX Workaround if response times are ugly slow

http://docker-sync.io/
http://stackoverflow.com/questions/38168130/docker-on-osx-slow-volumes/42679301#42679301
https://github.com/IFSight/d4m-nfs
