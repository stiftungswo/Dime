# DimeErp

An ERP based on Symfony and AngularDart

[![Build Status](https://travis-ci.org/stiftungswo/Dime.svg?branch=master)](https://travis-ci.org/stiftungswo/Dime)
[![codecov](https://codecov.io/gh/stiftungswo/Dime/branch/master/graph/badge.svg)](https://codecov.io/gh/stiftungswo/Dime)


## General Purpose

The project's purpose is tracking working Expenses Writing Offers and Sending Invoices

An API and open architecture will serve additional purposes:

  * accounting and invoicing (generate invoices, add non-time related items)
  * manage customers (CRM)
  * project management


## Installation / Setup for Development

Download and install Docker and docker-compose:

    https://www.docker.com

If your host system is running on Mac OS or Windows, you also need to install VirtualBox and create a default machine

    https://www.virtualbox.org
    # docker-machine create default

Download and install a Git client:

    e.g. https://www.sourcetreeapp.com/ (Win & Mac)

Check out the current version with all submodules

    git clone --recursive https://bitbucket.org/stiftungswo/dime

Download Dartium (supports Dart files in chrome in uncompiled version):

    https://webdev.dartlang.org/tools

Now fire up MariaDB and Dime on the docker machine via the docker-compose tool:

    docker-compose up -d --build

Open http://localhost:3000 with dartium:

    dartium localhost:3000

Fix Pub Cache by Linking to enable auto-completion (dart-analyzer) in IDE:

    In OSX, cd into this repository's root and run: ln -s /tmp/dime-pub-cache .pub-cache

## Project Structure

The Frontend can be found under `src/Dime/FrontendBundle/Resources/public`. There is a separate README.md in the folder for further information.

The Backend files are located in 'src/Dime/' & the relative Bundle folder. Server-Side Routing happens in the [Bundle]/config/routing.yml

## Using Docker & docker-compose

You can inspect the logs of Dime and MariaDB by:

    docker-compose logs -f

Enter the dime docker container as root in interactive mode (bash):

    docker exec -it dime bash

Run any command inside the docker container:

    docker exec -it dime COMMAND

If you made any changes to the docker config, php config, composer dependencies etc. that are affecting the docker setup, run this command again:

    docker-compose up -d --build


For more infos visit docker.com


## Update

Update to last version

    git pull
    composer self-update
    composer update -v
    ./env/install_bundles.sh

If you have any problem remove vendor and install again

    rm -fR vendor

Update database

    docker exec -it dime php app/console doctrine:migrations:migrate


## Bundles

There are Multiple Bundle Seperated by features:
    TimetrackerBundle Base Entities and RestAPI for them
    OfferBundle Offer Entities ans RestAPI
    InvoiceBundle Invoice Entities and RestAPI
    PrintingBundle Service for Printing PDF's
    FrontendBundle The Javascript GUI
    SwoCommonsBundle Some Entities and Resources used by all our Applications


## Contributing

Please feel free to contribute issues, improvements and feedback.

For code contributions, [Symfony2 Coding Standards] are the way we want to go.

Please write in English and use the `doc` folders for documentation and proposals rather than Github wiki.

[Symfony2 Coding Standards]: http://symfony.com/doc/master/contributing/code/standards.html


## Development-Branches

The branches API and Frontend are gone. We switch now to feature branches. Every feature branch will be created from master. Here the steps to go.

Create remote feature branch:

    git pull origin master
    git push origin ISSUENO-and-a-short-description
    git checkout -t ISSUENO-and-a-short-description

or for short bugfixing create only a local branch:

    git pull origin master
    git checkout -b ISSUENO-and-a-short-description

keep up to date with the master (not sure with this - have to test it):

    git fetch origin master
    git rebase orgin/master

if your work is done, merge back to master:

    git checkout master
    git fetch
    git rebase
    git merge ISSUENO-and-a-short-description

Finally remove remote feature branch:

    git push origin :ISSUENO-and-a-short-description

and the local branch too:

    git branch -d ISSUENO-and-a-short-description


## Run Test

Run tests:

    docker exec -it dime ./env/run_tests.sh

Run a single test:

    docker exec -it dime ./env/run_tests.sh --filter ActivitiesControllerTest::testGetActivitiesAction


## Building the Frontend

To build the JS & HTML files for deployment, run these commands inside the VM:

    docker exec -it dime ./env/build_frontend.sh

Always build & commit the frontend before merging into master!


## Database Schema Management

Update Database Schema to the latest version:

    docker exec -it dime php app/console doctrine:migrations:migrate

Migrate Database Schema to a specific version:

    docker exec -it dime php app/console doctrine:migrations:migrate <version>

Generate new Empty Migration Class:

    docker exec -it dime php app/console doctrine:migrations:generate

After changing the ORM schema, sometimes you need to clear the cache before it works:

    docker exec -it dime php app/console cache:clear


## Fixtures

The fixtures are an example dataset that can be used while developing. But more important: the tests run against this database.

Load fixtures into the database:

    docker exec -it dime ./env/fixtures/load.sh

When the database schema changed, you need to regenerate the fixtures. You can do this with the following command (may take a while):

    docker exec -it dime ./env/db_generate_new_fixtures.sh

Then export the changes again and check in the new dime.sql into git

    docker exec -it dime ./env/fixtures/export.sh


## Deployment

### Deployment at SWO

Please see Documentation at: DiskStation:/intern/IT/10. Software/Dime/Betriebsdokumentation.docx

# Known Issues

## Using dartlang Plugin with atom

If you use Atom as IDE you'll propably want to benefit from the type safety features of Dart and install the static analyzer plugin `dart-atom/dartlang`.
Before you blame the readme that even after fixing the pub cache things don't work they way they are supposed to, just open the directory `src/Dime/FrontendBundle/Resources/public` in a new window and start coding.

## Docker and Superuser on Linux

You can run docker without sudo on Linux. Example for Ubuntu:

    https://askubuntu.com/a/477554

## Using Docker with Docker for Windows/Mac

If you use the new Docker for Windows/Mac Tray thing, you'll have to make sure that this Repository as well as any other mounted volumes in docker-compose.yml are part of the `File Sharing` Tab of the tool. Else sync will not work.

We recommend using at least 2 CPU's and 4 GB of memory for your docker machine to make everything run smooth.

### OSX Workaround if response times are ugly slow

http://stackoverflow.com/questions/38168130/docker-on-osx-slow-volumes/42679301#42679301
https://github.com/IFSight/d4m-nfs
