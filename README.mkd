# DimeErp

A Erp based on Symfony and DojoToolkit

## General Purpose

The project's purpose is tracking working Expenses Writing Offers and Sending Invoices

An API and open architecture will serve additional purposes:

  * accounting and invoicing (generate invoices, add non-time related items)
  * manage customers (CRM)
  * project management
  
## Demo

See the Vagrant VM in env Folder

## Installation

Submodules:

    git submodule update --init

Permissions:

    chmod -R u+w app/cache app/logs

Copy parameter.yml.template to parameters.yml and edit the database section:

    cp app/config/parameters.yml.template app/config/parameters.yml

Download composer:

    curl -s http://getcomposer.org/installer | php

Download vendors:

    php composer.phar install -v

Check application config in browser:

    http://path/to/web/config.php

Create database with fixtures:

    app/console dime:create-db

Publish all needed assets for Dev and Production:

    app/console assetic:dump
    app/console assets:install --symlink

## Update

Update to last version

    git pull
    git submodule update
    php composer.phar self-update
    php composer.phar update -v
    app/console assetic:dump
    app/console assets:install --symlink

If you have any problem remove vendor and install again

    rm -fR vendor

Update database

    app/console doctrine:migrations:migrate

## Bundles

There are Multiple Bundle Seperated by features:
    TimetrackerBundle Base Entities and RestAPI for them
    OfferBundle Offer Entities ans RestAPI
    InvoiceBundle Invoice Entities and RestAPI
    PrintingBundle Service for Printing PDF's
    FrontendBundle The Javascript GUI
    SwoCommonsBundle Some Entities and Resources used by all our Applications

## Contributing

Please feel free to contribute issues, improvements and feedback.

For code contributions, [Symfony2 Coding Standards] are the way we want to go.

Please write in English and use the `doc` folders for documentation and proposals rather than Github wiki.

[Symfony2 Coding Standards]: http://symfony.com/doc/master/contributing/code/standards.html

## Development-Branches

The branches API and Frontend are gone. We switch now to feature branches. Every feature branch will be created from master. Here the steps to go.

Create remote feature branch:

    git pull origin master
    git push origin ISSUENO-and-a-short-description
    git checkout -t ISSUENO-and-a-short-description

or for short bugfixing create only a local branch:

    git pull origin master
    git checkout -b ISSUENO-and-a-short-description

keep up to date with the master (not sure with this - have to test it):

    git fetch origin master
    git rebase orgin/master

if your work is done, merge back to master:

    git checkout master
    git fetch
    git rebase
    git merge ISSUENO-and-a-short-description

Finally remove remote feature branch:

    git push origin :ISSUENO-and-a-short-description

and the local branch too:

    git branch -d ISSUENO-and-a-short-description

## Run Test

Install PHPUnit: http://symfony.com/doc/current/contributing/code/tests.html

    $ pear channel-discover pear.phpunit.de
    $ pear channel-discover components.ez.no
    $ pear channel-discover pear.symfony-project.com
    $ pear install phpunit/PHPUnit

Run tests:

    phpunit -c app/