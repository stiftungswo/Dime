# DimeErp

An ERP based on Symfony and AngularDart

## General Purpose

The project's purpose is tracking working Expenses Writing Offers and Sending Invoices

An API and open architecture will serve additional purposes:

  * accounting and invoicing (generate invoices, add non-time related items)
  * manage customers (CRM)
  * project management
  
## Demo

See the Vagrant VM in env Folder

## Installation

### Windows

Download and install VirtualBox:

	https://www.virtualbox.org/
	
Download and install Cygwin:

	https://cygwin.com/
	In the package selection of the setup, search rsync and add it
	
Modify the hosts file:

	In C:\Windows\System32\drivers\etc\hosts add the line
	192.168.122.10 dime.test.local
	
Download and install a Git client:

	e.g. https://www.sourcetreeapp.com/
	Check out the current version
	
Start the virtual machine via the cygwin terminal:

	Change the cygdrive-prefix and start vagrant
	mount --change-cygdrive-prefix /
	cd /c/Users/YourName/Dime/env
	/c/HashiCorp/Vagrant/bin/vagrant.exe up

Download e.g. Dartium which is a Google Chrome for developpers:
	
	https://www.dartlang.org/tools/dartium/
	Start it by unzipping and executing the file chrome.exe
	Go to the page http://dime.test.local
	
## Update

Update to last version

    git pull
    git submodule update
    php composer.phar self-update
    php composer.phar update -v
    app/console assetic:dump
    app/console assets:install --symlink

If you have any problem remove vendor and install again

    rm -fR vendor

Update database

    app/console doctrine:migrations:migrate

## Bundles

There are Multiple Bundle Seperated by features:
    TimetrackerBundle Base Entities and RestAPI for them
    OfferBundle Offer Entities ans RestAPI
    InvoiceBundle Invoice Entities and RestAPI
    PrintingBundle Service for Printing PDF's
    FrontendBundle The Javascript GUI
    SwoCommonsBundle Some Entities and Resources used by all our Applications

## Contributing

Please feel free to contribute issues, improvements and feedback.

For code contributions, [Symfony2 Coding Standards] are the way we want to go.

Please write in English and use the `doc` folders for documentation and proposals rather than Github wiki.

[Symfony2 Coding Standards]: http://symfony.com/doc/master/contributing/code/standards.html

## Development-Branches

The branches API and Frontend are gone. We switch now to feature branches. Every feature branch will be created from master. Here the steps to go.

Create remote feature branch:

    git pull origin master
    git push origin ISSUENO-and-a-short-description
    git checkout -t ISSUENO-and-a-short-description

or for short bugfixing create only a local branch:

    git pull origin master
    git checkout -b ISSUENO-and-a-short-description

keep up to date with the master (not sure with this - have to test it):

    git fetch origin master
    git rebase orgin/master

if your work is done, merge back to master:

    git checkout master
    git fetch
    git rebase
    git merge ISSUENO-and-a-short-description

Finally remove remote feature branch:

    git push origin :ISSUENO-and-a-short-description

and the local branch too:

    git branch -d ISSUENO-and-a-short-description

## Run Test

Run tests:

    phpunit -c app/

Run a single test:

    phpunit -c app/ --filter ActivitiesControllerTest::testGetActivitiesAction
    
## Building the Frontend

To build the JS & HTML files for deployment, run these commands inside the VM:

    cd /vagrant/env && ./pub.sh build

Always build the frontend before merging into master!

## Database Schema Management

Update Database Schema to the latest version:

    php app/console doctrine:migrations:migrate

Migrate Database Schema to a specific version:

    php app/console doctrine:migrations:migrate <version>

Generate new Empty Migration Class:

    php app/console doctrine:migrations:generate

## Fixtures

When the database schema changed, you need to regenerate the fixtures. You can do this with the following command:

    cd /vagrant/env/fixtures/ && ./regenerate_fixtures.sh

